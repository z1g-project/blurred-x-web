{"version":3,"file":"uv.sw.js","mappings":"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","sources":["webpack://@titaniumnetwork-dev/ultraviolet/./src/uv.sw.js"],"sourcesContent":["/*globals __uv$config*/\n// Users must import the config (and bundle) prior to importing uv.sw.js\n// This is to allow us to produce a generic bundle with no hard-coded paths.\n\n/**\n * @type {import('./uv').UltravioletCtor}\n */\nconst Ultraviolet = self.Ultraviolet;\n\nconst cspHeaders = [\n    'cross-origin-embedder-policy',\n    'cross-origin-opener-policy',\n    'cross-origin-resource-policy',\n    'content-security-policy',\n    'content-security-policy-report-only',\n    'expect-ct',\n    'feature-policy',\n    'origin-isolation',\n    'strict-transport-security',\n    'upgrade-insecure-requests',\n    'x-content-type-options',\n    'x-download-options',\n    'x-frame-options',\n    'x-permitted-cross-domain-policies',\n    'x-powered-by',\n    'x-xss-protection',\n];\nconst emptyMethods = ['GET', 'HEAD'];\n\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\n    constructor(config = __uv$config) {\n        super();\n        if (!config.bare) config.bare = '/bare/';\n        if (!config.prefix) config.prefix = '/service/';\n        this.config = config;\n        const addresses = (\n            Array.isArray(config.bare) ? config.bare : [config.bare]\n        ).map((str) => new URL(str, location).toString());\n        this.address = addresses[~~(Math.random() * addresses.length)];\n        /**\n         * @type {InstanceType<Ultraviolet['BareClient']>}\n         */\n        this.bareClient = new Ultraviolet.BareClient(this.address);\n    }\n    /**\n     *\n     * @param {Event & {request: Request}} param0\n     * @returns\n     */\n    async fetch({ request }) {\n        try {\n            if (!request.url.startsWith(location.origin + this.config.prefix))\n                return await fetch(request);\n\n            const ultraviolet = new Ultraviolet(this.config, this.address);\n\n            if (typeof this.config.construct === 'function') {\n                this.config.construct(ultraviolet, 'service');\n            }\n\n            const db = await ultraviolet.cookie.db();\n\n            ultraviolet.meta.origin = location.origin;\n            ultraviolet.meta.base = ultraviolet.meta.url = new URL(\n                ultraviolet.sourceUrl(request.url)\n            );\n\n            const requestCtx = new RequestContext(\n                request,\n                this,\n                ultraviolet,\n                !emptyMethods.includes(request.method.toUpperCase())\n                    ? await request.blob()\n                    : null\n            );\n\n            if (ultraviolet.meta.url.protocol === 'blob:') {\n                requestCtx.blob = true;\n                requestCtx.base = requestCtx.url = new URL(\n                    requestCtx.url.pathname\n                );\n            }\n\n            if (\n                request.referrer &&\n                request.referrer.startsWith(location.origin)\n            ) {\n                const referer = new URL(\n                    ultraviolet.sourceUrl(request.referrer)\n                );\n\n                if (\n                    requestCtx.headers.origin ||\n                    (ultraviolet.meta.url.origin !== referer.origin &&\n                        request.mode === 'cors')\n                ) {\n                    requestCtx.headers.origin = referer.origin;\n                }\n\n                requestCtx.headers.referer = referer.href;\n            }\n\n            const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\n            const cookieStr = ultraviolet.cookie.serialize(\n                cookies,\n                ultraviolet.meta,\n                false\n            );\n\n            requestCtx.headers['user-agent'] = navigator.userAgent;\n\n            if (cookieStr) requestCtx.headers.cookie = cookieStr;\n\n            const reqEvent = new HookEvent(requestCtx, null, null);\n            this.emit('request', reqEvent);\n\n            if (reqEvent.intercepted) return reqEvent.returnValue;\n\n            const response = await this.bareClient.fetch(\n                requestCtx.blob\n                    ? 'blob:' + location.origin + requestCtx.url.pathname\n                    : requestCtx.url,\n                {\n                    headers: requestCtx.headers,\n                    method: requestCtx.method,\n                    body: requestCtx.body,\n                    credentials: requestCtx.credentials,\n                    mode:\n                        location.origin !== requestCtx.address.origin\n                            ? 'cors'\n                            : requestCtx.mode,\n                    redirect: requestCtx.redirect,\n                }\n            );\n\n            const responseCtx = new ResponseContext(requestCtx, response);\n            const resEvent = new HookEvent(responseCtx, null, null);\n\n            this.emit('beforemod', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            for (const name of cspHeaders) {\n                if (responseCtx.headers[name]) delete responseCtx.headers[name];\n            }\n\n            if (responseCtx.headers.location) {\n                responseCtx.headers.location = ultraviolet.rewriteUrl(\n                    responseCtx.headers.location\n                );\n            }\n\n            if (responseCtx.headers['set-cookie']) {\n                Promise.resolve(\n                    ultraviolet.cookie.setCookies(\n                        responseCtx.headers['set-cookie'],\n                        db,\n                        ultraviolet.meta\n                    )\n                ).then(() => {\n                    self.clients.matchAll().then(function (clients) {\n                        clients.forEach(function (client) {\n                            client.postMessage({\n                                msg: 'updateCookies',\n                                url: ultraviolet.meta.url.href,\n                            });\n                        });\n                    });\n                });\n                delete responseCtx.headers['set-cookie'];\n            }\n\n            if (responseCtx.body) {\n                switch (request.destination) {\n                    case 'script':\n                    case 'worker':\n                        {\n                            // craft a JS-safe list of arguments\n                            const scripts = [\n                                ultraviolet.bundleScript,\n                                ultraviolet.clientScript,\n                                ultraviolet.configScript,\n                                ultraviolet.handlerScript,\n                            ]\n                                .map((script) => JSON.stringify(script))\n                                .join(',');\n                            responseCtx.body = `if (!self.__uv && self.importScripts) { ${ultraviolet.createJsInject(\n                                this.address,\n                                this.bareClient.data,\n                                ultraviolet.cookie.serialize(\n                                    cookies,\n                                    ultraviolet.meta,\n                                    true\n                                ),\n                                request.referrer\n                            )} importScripts(${scripts}); }\\n`;\n                            responseCtx.body += ultraviolet.js.rewrite(\n                                await response.text()\n                            );\n                        }\n                        break;\n                    case 'style':\n                        responseCtx.body = ultraviolet.rewriteCSS(\n                            await response.text()\n                        );\n                        break;\n                    case 'iframe':\n                    case 'document':\n                        if (\n                            isHtml(\n                                ultraviolet.meta.url,\n                                responseCtx.headers['content-type'] || ''\n                            )\n                        ) {\n                            responseCtx.body = ultraviolet.rewriteHtml(\n                                await response.text(),\n                                {\n                                    document: true,\n                                    injectHead: ultraviolet.createHtmlInject(\n                                        ultraviolet.handlerScript,\n                                        ultraviolet.bundleScript,\n                                        ultraviolet.clientScript,\n                                        ultraviolet.configScript,\n                                        this.address,\n                                        this.bareClient.data,\n                                        ultraviolet.cookie.serialize(\n                                            cookies,\n                                            ultraviolet.meta,\n                                            true\n                                        ),\n                                        request.referrer\n                                    ),\n                                }\n                            );\n                        }\n                }\n            }\n\n            if (requestCtx.headers.accept === 'text/event-stream') {\n                responseCtx.headers['content-type'] = 'text/event-stream';\n            }\n\n            this.emit('response', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            return new Response(responseCtx.body, {\n                headers: responseCtx.headers,\n                status: responseCtx.status,\n                statusText: responseCtx.statusText,\n            });\n        } catch (err) {\n            console.error(err);\n            return new Response(err.toString(), {\n                status: 500,\n            });\n        }\n    }\n    static Ultraviolet = Ultraviolet;\n}\n\nself.UVServiceWorker = UVServiceWorker;\n\nclass ResponseContext {\n    /**\n     *\n     * @param {RequestContext} request\n     * @param {import(\"@tomphttp/bare-client\").BareResponseFetch} response\n     */\n    constructor(request, response) {\n        this.request = request;\n        this.raw = response;\n        this.ultraviolet = request.ultraviolet;\n        this.headers = {};\n        // eg set-cookie\n        for (const key in response.rawHeaders)\n            this.headers[key.toLowerCase()] = response.rawHeaders[key];\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n    }\n    get url() {\n        return this.request.url;\n    }\n    get base() {\n        return this.request.base;\n    }\n    set base(val) {\n        this.request.base = val;\n    }\n}\n\nclass RequestContext {\n    /**\n     *\n     * @param {Request} request\n     * @param {UVServiceWorker} worker\n     * @param {Ultraviolet} ultraviolet\n     * @param {BodyInit} body\n     */\n    constructor(request, worker, ultraviolet, body = null) {\n        this.ultraviolet = ultraviolet;\n        this.request = request;\n        this.headers = Object.fromEntries(request.headers.entries());\n        this.method = request.method;\n        this.address = worker.address;\n        this.body = body || null;\n        this.redirect = request.redirect;\n        this.credentials = 'omit';\n        this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\n        this.blob = false;\n    }\n    get url() {\n        return this.ultraviolet.meta.url;\n    }\n    set url(val) {\n        this.ultraviolet.meta.url = val;\n    }\n    get base() {\n        return this.ultraviolet.meta.base;\n    }\n    set base(val) {\n        this.ultraviolet.meta.base = val;\n    }\n}\n\nfunction isHtml(url, contentType = '') {\n    return (\n        (\n            Ultraviolet.mime.contentType(contentType || url.pathname) ||\n            'text/html'\n        ).split(';')[0] === 'text/html'\n    );\n}\n\nclass HookEvent {\n    #intercepted;\n    #returnValue;\n    constructor(data = {}, target = null, that = null) {\n        this.#intercepted = false;\n        this.#returnValue = null;\n        this.data = data;\n        this.target = target;\n        this.that = that;\n    }\n    get intercepted() {\n        return this.#intercepted;\n    }\n    get returnValue() {\n        return this.#returnValue;\n    }\n    respondWith(input) {\n        this.#returnValue = input;\n        this.#intercepted = true;\n    }\n}\n"],"names":["Ultraviolet","self","cspHeaders","emptyMethods","UVServiceWorker","EventEmitter","constructor","config","__uv$config","super","bare","prefix","this","addresses","Array","isArray","map","str","URL","location","toString","address","Math","random","length","bareClient","BareClient","async","request","url","startsWith","origin","fetch","ultraviolet","construct","db","cookie","meta","base","sourceUrl","requestCtx","RequestContext","includes","method","toUpperCase","blob","protocol","pathname","referrer","referer","headers","mode","href","cookies","getCookies","cookieStr","serialize","navigator","userAgent","reqEvent","HookEvent","emit","intercepted","returnValue","response","body","credentials","redirect","responseCtx","ResponseContext","resEvent","name","rewriteUrl","Promise","resolve","setCookies","then","clients","matchAll","forEach","client","postMessage","msg","destination","scripts","bundleScript","clientScript","configScript","handlerScript","script","JSON","stringify","join","createJsInject","data","js","rewrite","text","rewriteCSS","contentType","mime","split","isHtml","rewriteHtml","document","injectHead","createHtmlInject","accept","Response","status","statusText","err","console","error","static","raw","key","rawHeaders","toLowerCase","val","worker","Object","fromEntries","entries","target","that","respondWith","input"],"sourceRoot":""}